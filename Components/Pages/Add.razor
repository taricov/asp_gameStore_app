@page "/add"
@page "/add/{id:int}"
@inject NavigationManager NavigationManager
@inject GenreClient GenreClient
@inject GameClient GameClient

<PageTitle>Add New Game</PageTitle>

@if(genres is null || game is null){
    <p><em>Loading...</em></p>
}else{    
  
<EditForm Model="@game" FormName="AddNewGame" OnValidSubmit="HandleSubmit">
  <DataAnnotationsValidator />

  <div class="form-group">
    <label for="game_name" class="form_label">Game Name</label>
    <InputText class="form-control" id="game_name" placeholder="Type Here..." @bind-Value="game.Name" />
    <ValidationMessage For="()=>game.Name" />
  </div>
  
  <div class="form-group">
    <label for="game_genre" class="form_label">Genre:</label>
    <InputSelect class="form-select" id="game_genre" @bind-Value="game.GenreId" >
    <option value="">---Select A Genre---</option>
    @foreach(var genre in genres) {
        <option value="@genre.Id">@genre.Name</option>
    }
    </InputSelect>
    <ValidationMessage For="()=> game.GenreId" />
  </div>

  <div class="form-group">
    <label for="game_price" class="form_label">Price:</label>
    <InputNumber class="form-control" id="game_price" @bind-Value="game.Price" />
    <ValidationMessage For="()=>game.Price" />
  </div>
  
  <div class="form-group">
    <label for="game_releasedate" class="form_label">Release Date:</label>
    <InputDate class="form-control" id="game_releasedate" @bind-Value="game.ReleaseDate" />
  </div>



  <button type="submit" class="btn btn-primary">Save</button>
  <button
  type="button" 
  class="btn btn-danger">Cancel</button>
  <ValidationSummary />
</EditForm>


}

@code
{
    [Parameter]
    public int? Id { get; set;}
    [SupplyParameterFromForm]


    private GameDetails? game {get; set;}
    
    private Genre[]? genres;

protected override void OnParametersSet()
    {
      if(game is not null)
      {
        return;
      }
      if(Id is not null)
      {
        game = GameClient.GetGame(Id.Value);
      }
      else
      {
        game = new()
      {        
        Name = string.Empty,
        ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow),
      };
      }
    }    
    protected override void OnInitialized()
    {
         genres = GenreClient.GetGenres();
    }
       private void HandleSubmit()
    {
      ArgumentNullException.ThrowIfNull(game);
      GameClient.AddGame(game);
      NavigationManager.NavigateTo("/");
    }
}